generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Line {
    id                     String                   @id @default(uuid())
    name                   String                   @unique
    password               String?
    barangay               Barangay                 @relation(fields: [barangayId], references: [id])
    barangayId             String
    municipal              Municipal                @relation(fields: [municipalId], references: [id])
    municipalId            String
    province               Province                 @relation(fields: [provinceId], references: [id])
    provinceId             String
    region                 Region                   @relation(fields: [regionId], references: [id])
    regionId               String
    createdAt              DateTime                 @default(now())
    status                 Int                      @default(1)
    Department             Department[]
    Account                Account[]
    User                   User[]
    Position               Position[]
    SalaryGrade            SalaryGrade[]
    Announcement           Announcement[]
    BirthdayNoticeResponse BirthdayNoticeResponse[]
    InvitationLink         InvitationLink[]
    Supplies               Supplies[]
    SupplyBatchOrder       SupplyBatchOrder[]
    Group                  Group[]
    AdminProfile           AdminProfile?            @relation(fields: [adminProfileId], references: [id])
    adminProfileId         String?
    InventoryBox           InventoryBox[]
    SuppliesDataSet        SuppliesDataSet[]
}

model InvitationLink {
    id        String    @id @default(uuid())
    code      String
    createdAt DateTime  @default(now())
    expiresAt DateTime?
    used      Boolean   @default(false)
    url       String
    line      Line      @relation(fields: [lineId], references: [id], onDelete: Cascade)
    lineId    String
}

model Assets {
    id                 String                   @id @default(uuid())
    url                String
    fileSize           String
    fileType           String
    fileName           String
    createdAt          DateTime                 @default(now())
    Supplies           Supplies?                @relation(fields: [suppliesId], references: [id])
    suppliesId         String?
    ProfilePicture     ProfilePicture[]
    SupplyOrderSupport SupplyOrderSupportFile[]
}

model ProfilePicture {
    id        String   @id @default(uuid())
    asset     Assets   @relation(fields: [assetsId], references: [id])
    assetsId  String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
}

// Model for supplies management
model InventoryBox {
    id                   String                 @id @default(uuid())
    name                 String                 @unique
    code                 Int                    @unique
    createdAt            DateTime               @default(now())
    batch                SupplyBatchOrder[]
    line                 Line                   @relation(fields: [lineId], references: [id])
    lineId               String
    createdBy            User                   @relation(name: "createdBy", fields: [userId], references: [id])
    userId               String
    unit                 Department?            @relation(fields: [departmentId], references: [id])
    departmentId         String?
    InventoryAccessLogs  InventoryAccessLogs[]
    SupplyBatch          SupplyBatch[]
    ContainerAllowedUser ContainerAllowedUser[]
    SuppliesDataSet      SuppliesDataSet[]
}

model ContainerAllowedUser {
    id             String       @id @default(uuid())
    user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId         String?
    container      InventoryBox @relation(fields: [inventoryBoxId], references: [id])
    inventoryBoxId String
    grantBy        User         @relation(name: "GrantBy", fields: [grantByUserId], references: [id])
    grantByUserId  String
    timestamp      DateTime     @default(now())
}

model InventoryAccessLogs {
    id             String        @id @default(uuid())
    user           User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId         String?
    timestamp      DateTime
    box            InventoryBox? @relation(fields: [inventoryBoxId], references: [id], onDelete: SetNull)
    inventoryBoxId String?
    action         String        @default("Viewed")
    supply         Supplies?     @relation(fields: [suppliesId], references: [id], onDelete: SetNull)
    suppliesId     String?
}

model Supplies {
    id                    String                  @id @default(uuid())
    code                  Int                     @unique @default(autoincrement())
    consumable            Boolean                 @default(true)
    item                  String
    description           String?                 @default("N/A")
    quantity              Int                     @default(1)
    notifyAtStockOf       Int                     @default(10)
    price                 Float                   @default(0.0)
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    line                  Line                    @relation(fields: [lineId], references: [id])
    lineId                String
    user                  User?                   @relation(fields: [userId], references: [id])
    userId                String?
    condition             String?                 @default("New") // e.g., "New", "Used", etc.
    status                String?                 @default("Available") // e.g., "Available", "
    SuppliesRecord        SuppliesRecord[]
    asset                 Assets[]
    Part                  SuppliesRecord?         @relation("Part")
    TransferredSupplies   TransferredSupplies[]
    SuppliesCategory      SuppliesCategory?       @relation(fields: [suppliesCategoryId], references: [id])
    suppliesCategoryId    String?
    SupplieRecieveHistory SupplieRecieveHistory[]
    InventoryAccessLogs   InventoryAccessLogs[]
    SupplyOrder           SupplyOrder[]
    SupplyBatchItem       SupplyBatchItem?
    SupplyPriceTrack      SupplyPriceTrack[]
    SuppliesQuality       SuppliesQuality?        @relation(fields: [suppliesQualityId], references: [id])
    suppliesQualityId     String?
    SupplyStockTrack      SupplyStockTrack[]
    SuppliesDataSet       SuppliesDataSet?        @relation(fields: [suppliesDataSetId], references: [id], onDelete: Cascade)
    suppliesDataSetId     String?
    SupplyBrand           SupplyBrand[]
    SupplyOrderItemReturn SupplyOrderItemReturn[]
}

model SupplyBrand {
    id                    String                  @id @default(uuid())
    supply                Supplies?               @relation(fields: [suppliesId], references: [id])
    suppliesId            String?
    SupplyOrderItemReturn SupplyOrderItemReturn[]
}

model SupplyBatch {
    id                String            @id @default(uuid())
    timestamp         DateTime          @default(now())
    title             String
    box               InventoryBox      @relation(fields: [inventoryBoxId], references: [id])
    inventoryBoxId    String
    SupplyBatchItem   SupplyBatchItem[]
    SuppliesDataSet   SuppliesDataSet?  @relation(fields: [suppliesDataSetId], references: [id], onDelete: SetNull)
    suppliesDataSetId String?
}

model SupplyBatchItem {
    id            String      @id @default(uuid())
    batch         SupplyBatch @relation(fields: [supplyBatchId], references: [id])
    supply        Supplies?   @relation(fields: [suppliesId], references: [id], onDelete: SetNull)
    supplyBatchId String
    suppliesId    String?     @unique
    timestamp     DateTime    @default(now())
}

model SupplyBatchOrder {
    id                String                   @id @default(uuid())
    timestamp         DateTime                 @default(now())
    title             String?                  @default("N/A")
    user              User?                    @relation(fields: [userId], references: [id])
    userId            String?
    status            Int                      @default(0)
    order             SupplyOrder[]
    files             SupplyOrderSupportFile[]
    line              Line?                    @relation(fields: [lineId], references: [id])
    lineId            String?
    InventoryBox      InventoryBox?            @relation(fields: [inventoryBoxId], references: [id])
    inventoryBoxId    String?
    SupplyOrderReturn SupplyOrderReturn[]
}

model SupplyOrderSupportFile {
    id                 String            @id @default(uuid())
    file               Assets            @relation(fields: [assetsId], references: [id])
    assetsId           String
    SupplyBatchOrder   SupplyBatchOrder? @relation(fields: [supplyBatchOrderId], references: [id])
    supplyBatchOrderId String?
}

model SupplyOrder {
    id                 String            @id @default(cuid())
    SupplyBatchOrder   SupplyBatchOrder? @relation(fields: [supplyBatchOrderId], references: [id])
    supplyBatchOrderId String?
    supply             Supplies          @relation(fields: [suppliesId], references: [id])
    suppliesId         String
    quantity           Int               @default(1)
    unit               SuppliesQuality   @relation(fields: [suppliesQualityId], references: [id])
    status             String            @default("Pending")
    suppliesQualityId  String
}

model SupplyOrderReturn {
    id                 String                  @id @default(uuid())
    batchOrder         SupplyBatchOrder        @relation(fields: [supplyBatchOrderId], references: [id], onDelete: Cascade)
    supplyBatchOrderId String
    status             Int                     @default(0)
    timestamp          DateTime                @default(now())
    item               SupplyOrderItemReturn[]
}

model SupplyOrderItemReturn {
    id                  String             @id @default(uuid())
    supply              Supplies?          @relation(fields: [suppliesId], references: [id], onDelete: SetNull)
    SupplyOrderReturn   SupplyOrderReturn? @relation(fields: [supplyOrderReturnId], references: [id], onDelete: Cascade)
    supplyOrderReturnId String?
    brand               SupplyBrand?       @relation(fields: [supplyBrandId], references: [id], onDelete: SetNull)
    supplyBrandId       String?
    suppliesId          String?
    quantity            Int                @default(1)
}

model SuppliesDataSet {
    id             String            @id @default(cuid())
    title          String            @unique
    unit           SuppliesQuality[]
    line           Line              @relation(fields: [lineId], references: [id])
    timestamp      DateTime          @default(now())
    lineId         String
    container      InventoryBox      @relation(fields: [inventoryBoxId], references: [id], onDelete: Cascade)
    inventoryBoxId String
    list           SupplyBatch[]
    supplies       Supplies[]
}

model SuppliesQuality {
    id                String           @id @default(cuid())
    quality           String           @unique
    perQuality        Int              @default(0)
    supplies          Supplies[]
    SuppliesDataSet   SuppliesDataSet? @relation(fields: [suppliesDataSetId], references: [id])
    suppliesDataSetId String?
    SupplyOrder       SupplyOrder[]
}

model SupplyPriceTrack {
    id         String   @id @default(uuid())
    value      Int      @default(0)
    supply     Supplies @relation(fields: [suppliesId], references: [id], onDelete: Cascade)
    suppliesId String
    timestamp  DateTime @default(now())
}

model SupplyStockTrack {
    id         String   @id @default(uuid())
    stock      Int      @default(0)
    supply     Supplies @relation(fields: [suppliesId], references: [id], onDelete: Cascade)
    suppliesId String
    timestamp  DateTime @default(now())
}

model SuppliesCategory {
    id          String     @id @default(uuid())
    name        String     @unique
    description String?
    createdAt   DateTime   @default(now())
    supplies    Supplies[]
}

model SupplieRecieveHistory {
    id         String   @id @default(uuid())
    supply     Supplies @relation(fields: [suppliesId], references: [id], onDelete: Cascade)
    suppliesId String
    userId     String
    timestamp  DateTime @default(now())
    quantity   Int      @default(0)
    condition  String?  @default("New")
}

model TransferredSupplies {
    id              String    @id @default(uuid())
    supply          Supplies? @relation(fields: [suppliesId], references: [id])
    suppliesId      String?
    user            User      @relation(fields: [userId], references: [id])
    userId          String
    transferredTo   User      @relation(name: "transferTo", fields: [transferredToId], references: [id])
    transferredToId String
    timestamp       DateTime  @default(now())
    condition       String?   @default("New")
}

model SuppliesRecord {
    id          String    @id @default(uuid())
    suppyId     Supplies  @relation(fields: [suppliesId], references: [id], onDelete: Cascade)
    suppliesId  String
    timestamp   DateTime  @default(now())
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    action      String
    status      Int       @default(1)
    description String?
    modified    Supplies? @relation(name: "Part", fields: [modifiedId], references: [id])
    modifiedId  String?   @unique
}

model Application {
    id         String   @id @default(uuid())
    userId     String
    positionId String
    status     String   @default("pending") // e.g., "pending", "approved", "rejected"
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
}

model Department {
    id           String         @id @default(uuid())
    name         String         @unique
    description  String?
    createdAt    DateTime       @default(now())
    head         User?          @relation(name: "DepartmentHead", fields: [headId], references: [id], onDelete: SetNull)
    headId       String?        @unique
    users        User[]         @relation(name: "DepartmentMembers")
    idCode       String?        @default("N/A")
    line         Line?          @relation(fields: [lineId], references: [id])
    lineId       String?
    Position     Position[]
    Announcement Announcement[]
    Group        Group[]
    InventoryBox InventoryBox[]
}

model Group {
    id           String     @id @default(uuid())
    unit         Department @relation(fields: [departmentId], references: [id])
    departmentId String
    users        User[]
    name         String?    @default("N/A")
    createdAt    DateTime   @default(now())
    line         Line?      @relation(fields: [lineId], references: [id])
    lineId       String?
    chief        User?      @relation(name: "Chief", fields: [userId], references: [id])
    userId       String?
}

model Admin {
    id       String @id @default(uuid())
    username String
    password String
}

model AdminProfile {
    id       String @id @default(uuid())
    username String
    line     Line[]
}

model Account {
    id        String   @id @default(uuid())
    username  String
    password  String
    createdAt DateTime @default(now())
    User      User?
    status    Int      @default(1) // 1 for active, 0 for inactive
    role      String   @default("user") // e.g., "admin", "user", etc.
    active    Boolean  @default(true)
    line      Line?    @relation(fields: [lineId], references: [id], onDelete: SetNull)
    lineId    String?
}

model Privilege {
    id             String  @id @default(uuid())
    humanResources Boolean @default(false)
    inventory      Boolean @default(false)
    User           User?
    super          Boolean @default(false)
}

model User {
    id                    String                   @id @default(uuid())
    firstName             String
    lastName              String
    middleName            String?
    suffix                String?
    birthDate             DateTime?
    email                 String                   @unique
    username              String                   @unique
    gender                String?                  @default("--/--")
    profilePicture        String?
    createdAt             DateTime                 @default(now())
    level                 Int                      @default(1)
    type                  String                   @default("M")
    step                  Int                      @default(1)
    status                String                   @default("Regular")
    sentNotifications     Notification[]           @relation("SentNotifications")
    receivedNotifications Notification[]           @relation("ReceivedNotifications")
    department            Department?              @relation(name: "DepartmentMembers", fields: [departmentId], references: [id], onDelete: SetNull)
    departmentId          String?
    headedDepartment      Department?              @relation(name: "DepartmentHead")
    Position              Position?                @relation(fields: [positionId], references: [id], onDelete: SetNull)
    positionId            String?
    SalaryGrade           SalaryGrade?             @relation(fields: [salaryGradeId], references: [id], onDelete: SetNull)
    salaryGradeId         String?
    Leave                 Leave[]
    Announcement          Announcement[]
    account               Account?                 @relation(fields: [accountId], references: [id])
    accountId             String?                  @unique
    Promotions            Promotion[]
    bdaySender            BirthdayNoticeResponse[] @relation("Sender")
    bdayRecipient         BirthdayNoticeResponse[] @relation("Recipient")
    region                Region?                  @relation(fields: [regionId], references: [id])
    regionId              String?
    province              Province?                @relation(fields: [provinceId], references: [id])
    municipal             Municipal?               @relation(fields: [municipalId], references: [id])
    municipalId           String?
    provinceId            String?
    barangay              Barangay?                @relation(fields: [barangayId], references: [id])
    barangayId            String?
    PositionSlot          PositionSlot?
    Accomplishment        Accomplishment[]
    headResponse          AccomplishmentResponse[] @relation("Head")
    line                  Line?                    @relation(fields: [lineId], references: [id], onDelete: SetNull)
    lineId                String?
    Supplies              Supplies[]
    SuppliesRecord        SuppliesRecord[]
    LogRecord             LogRecord[]
    transferTo            TransferredSupplies[]    @relation("transferTo")
    TransferredSupplies   TransferredSupplies[]
    ProfilePicture        ProfilePicture?
    Application           Application[]
    privilege             Privilege?               @relation(fields: [privilegeId], references: [id], onDelete: SetNull)
    privilegeId           String?                  @unique
    SupplyBatchOrder      SupplyBatchOrder[]
    Group                 Group?                   @relation(fields: [groupId], references: [id], onDelete: SetNull)
    groupId               String?
    chief                 Group[]                  @relation("Chief")
    InventoryBox          InventoryBox[]           @relation("createdBy")
    InventoryAccessLogs   InventoryAccessLogs[]
    ContainerAllowedUser  ContainerAllowedUser[]
    GrantContainer        ContainerAllowedUser[]   @relation("GrantBy")

    @@index([id], name: "id_idx")
}

model LogRecord {
    id        String   @id @default(uuid())
    userId    String
    action    String // e.g., "login", "logout", "update_profile"
    timestamp DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
    id          String   @id @default(uuid())
    title       String
    content     String
    createdAt   DateTime @default(now())
    recipientId String
    senderId    String
    sender      User     @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
    recipient   User     @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
    path        String?
    isRead      Boolean  @default(false)
}

model Position {
    id            String         @id @default(uuid())
    name          String         @unique
    description   String?
    max           Int            @default(0)
    createdAt     DateTime       @default(now())
    users         User[]
    itemNumber    String?        @unique
    Promotion     Promotion[]
    SalaryGrade   SalaryGrade?   @relation(fields: [salaryGradeId], references: [id], onDelete: SetNull)
    salaryGradeId String?
    plantilla     Boolean        @default(false)
    PositionSlot  PositionSlot[]
    line          Line?          @relation(fields: [lineId], references: [id], onDelete: SetNull)
    lineId        String?
    department    Department?    @relation(fields: [departmentId], references: [id], onDelete: SetNull)
    departmentId  String?
    Application   Application[]
}

model PositionSlot {
    id            String      @id @default(uuid())
    pos           Position    @relation(fields: [positionId], references: [id])
    positionId    String
    salaryGrade   SalaryGrade @relation(fields: [salaryGradeId], references: [id])
    salaryGradeId String
    user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId        String?     @unique
}

model SalaryGrade {
    id                 String               @id @default(uuid())
    grade              Int
    amount             Float
    createdAt          DateTime             @default(now())
    users              User[]
    SalaryGradeHistory SalaryGradeHistory[]
    positions          Position[]
    PositionSlot       PositionSlot[]
    line               Line?                @relation(fields: [lineId], references: [id], onDelete: SetNull)
    lineId             String?
}

model SalaryGradeHistory {
    id            String      @id @default(uuid())
    userId        String
    salaryGradeId String
    effectiveDate DateTime
    createdAt     DateTime    @default(now())
    amount        Int
    salaryGrade   SalaryGrade @relation(fields: [salaryGradeId], references: [id], onDelete: Cascade)
}

model Leave {
    id        String   @id @default(uuid())
    userId    String
    type      String
    startDate DateTime
    endDate   DateTime
    reason    String?
    status    String   @default("pending")
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model Announcement {
    id           String      @id @default(uuid())
    title        String
    content      String
    createdAt    DateTime    @default(now())
    authorId     String
    author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
    line         Line        @relation(fields: [lineId], references: [id])
    lineId       String
    path         String?
    important    Boolean     @default(true)
    unit         Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
    departmentId String?
}

model Promotion {
    id         String   @id @default(uuid())
    User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    timestamp  DateTime @default(now())
    postion    Position @relation(fields: [positionId], references: [id])
    positionId String
}

model BirthdayNoticeResponse {
    id          String   @id @default(uuid())
    message     String?
    Sender      User     @relation(name: "Sender", fields: [senderId], references: [id])
    like        Boolean  @default(false)
    timestamp   DateTime @default(now())
    senderId    String
    Recipient   User?    @relation(name: "Recipient", fields: [recipientId], references: [id])
    recipientId String?
    line        Line     @relation(fields: [lineId], references: [id])
    lineId      String
}

model Region {
    id       String     @id
    name     String
    provices Province[]
    User     User[]
    Line     Line[]
}

model Province {
    id         String      @id
    name       String
    Region     Region?     @relation(fields: [regionId], references: [id])
    regionId   String?
    municipals Municipal[]
    User       User[]
    Line       Line[]
}

model Municipal {
    id         String     @id
    name       String
    Province   Province?  @relation(fields: [provinceId], references: [id])
    provinceId String?
    barangays  Barangay[]
    User       User[]
    Line       Line[]
}

model Barangay {
    id          String     @id
    name        String
    Municipal   Municipal? @relation(fields: [municipalId], references: [id])
    municipalId String?
    User        User[]
    Line        Line[]
}

model Accomplishment {
    id                     String                   @id @default(uuid())
    timestamp              DateTime                 @default(now())
    user                   User?                    @relation(fields: [userId], references: [id])
    userId                 String?
    start                  DateTime
    end                    DateTime
    task                   String
    AccomplishmentResponse AccomplishmentResponse[]
}

model AccomplishmentResponse {
    id               String         @id @default(uuid())
    head             User           @relation(name: "Head", fields: [headId], references: [id])
    headId           String
    accomplishment   Accomplishment @relation(fields: [accomplishmentId], references: [id])
    accomplishmentId String
    message          String
    timestamp        DateTime       @default(now())
}
